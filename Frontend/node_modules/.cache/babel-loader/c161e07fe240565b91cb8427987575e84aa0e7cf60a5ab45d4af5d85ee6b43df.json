{"ast":null,"code":"import axios from \"axios\";\nimport { formatName } from \"../utils/nameUtils\";\nconst baseUrl = \"https://example-user-api.herokuapp.com\";\n\n// Requests a single user from the server based on their id\nexport const getUser = async userId => {\n  try {\n    const {\n      data\n    } = await axios.get(`${baseUrl}/users/${userId}`);\n    return getUserFromResponse(data);\n  } catch (error) {\n    console.error(`error in api.ts -> getUser(${userId}).\\n`, {\n      error\n    });\n  }\n};\n\n// Requests all users from the server\nexport const getUsers = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`${baseUrl}/users`);\n    return data.map(user => getUserFromResponse(user));\n  } catch (error) {\n    console.error(`error in api.ts -> getUsers.\\n`, {\n      error\n    });\n  }\n};\n\n// Example function that would update a user on the server\nexport const setUser = async userData => {\n  try {\n    const {\n      data\n    } = await axios.post(\"www.example.com/user\", userData);\n    return getUserFromResponse(data);\n  } catch (error) {\n    console.error(`error in api.ts -> setUser.\\n`, {\n      error\n    });\n  }\n};\n\n// Helper function to convert the server user data object to our frontend user object\nconst getUserFromResponse = _ref => {\n  let {\n    id,\n    firstName,\n    lastName\n  } = _ref;\n  return {\n    id,\n    fullName: formatName(firstName, lastName)\n  };\n};","map":{"version":3,"names":["axios","formatName","baseUrl","getUser","userId","data","get","getUserFromResponse","error","console","getUsers","map","user","setUser","userData","post","id","firstName","lastName","fullName"],"sources":["C:/Users/ferra/Downloads/accenture-postcourse-nsight/Frontend/src/data/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport UserData from \"../types/internal/UserData\";\r\nimport UserDataRequest from \"../types/server/UserDataRequest\";\r\nimport UserDataResponse from \"../types/server/UserDataResponse\";\r\nimport { formatName } from \"../utils/nameUtils\";\r\n\r\nconst baseUrl = \"https://example-user-api.herokuapp.com\";\r\n\r\n// Requests a single user from the server based on their id\r\nexport const getUser = async (userId: number): Promise<void | UserData> => {\r\n  try {\r\n    const { data }: AxiosResponse<UserDataResponse> = await axios.get(\r\n      `${baseUrl}/users/${userId}`\r\n    );\r\n    return getUserFromResponse(data);\r\n  } catch (error) {\r\n    console.error(`error in api.ts -> getUser(${userId}).\\n`, { error });\r\n  }\r\n};\r\n\r\n// Requests all users from the server\r\nexport const getUsers = async (): Promise<void | UserData[]> => {\r\n  try {\r\n    const { data }: AxiosResponse<UserDataResponse[]> = await axios.get(\r\n      `${baseUrl}/users`\r\n    );\r\n    return data.map((user) => getUserFromResponse(user));\r\n  } catch (error) {\r\n    console.error(`error in api.ts -> getUsers.\\n`, { error });\r\n  }\r\n};\r\n\r\n// Example function that would update a user on the server\r\nexport const setUser = async (\r\n  userData: UserDataRequest\r\n): Promise<void | UserData> => {\r\n  try {\r\n    const { data }: AxiosResponse<UserDataResponse> = await axios.post(\r\n      \"www.example.com/user\",\r\n      userData\r\n    );\r\n    return getUserFromResponse(data);\r\n  } catch (error) {\r\n    console.error(`error in api.ts -> setUser.\\n`, { error });\r\n  }\r\n};\r\n\r\n// Helper function to convert the server user data object to our frontend user object\r\nconst getUserFromResponse = ({\r\n  id,\r\n  firstName,\r\n  lastName,\r\n}: UserDataResponse): UserData => ({\r\n  id,\r\n  fullName: formatName(firstName, lastName),\r\n});\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAI5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,OAAO,GAAG,wCAAwC;;AAExD;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,MAAc,IAA+B;EACzE,IAAI;IACF,MAAM;MAAEC;IAAsC,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAC9D,GAAEJ,OAAQ,UAASE,MAAO,EAAC,CAC7B;IACD,OAAOG,mBAAmB,CAACF,IAAI,CAAC;EAClC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAE,8BAA6BJ,MAAO,MAAK,EAAE;MAAEI;IAAM,CAAC,CAAC;EACtE;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,YAAwC;EAC9D,IAAI;IACF,MAAM;MAAEL;IAAwC,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAChE,GAAEJ,OAAQ,QAAO,CACnB;IACD,OAAOG,IAAI,CAACM,GAAG,CAAEC,IAAI,IAAKL,mBAAmB,CAACK,IAAI,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAE,gCAA+B,EAAE;MAAEA;IAAM,CAAC,CAAC;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,OAAO,GAAG,MACrBC,QAAyB,IACI;EAC7B,IAAI;IACF,MAAM;MAAET;IAAsC,CAAC,GAAG,MAAML,KAAK,CAACe,IAAI,CAChE,sBAAsB,EACtBD,QAAQ,CACT;IACD,OAAOP,mBAAmB,CAACF,IAAI,CAAC;EAClC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAE,+BAA8B,EAAE;MAAEA;IAAM,CAAC,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,MAAMD,mBAAmB,GAAG;EAAA,IAAC;IAC3BS,EAAE;IACFC,SAAS;IACTC;EACgB,CAAC;EAAA,OAAgB;IACjCF,EAAE;IACFG,QAAQ,EAAElB,UAAU,CAACgB,SAAS,EAAEC,QAAQ;EAC1C,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}